{"version":3,"sources":["Context/ListContext.js","components/TodoList/components/FormUpdate/index.js","components/TodoList/components/TodoItem/index.js","components/BulkAction/index.js","components/FormAddTask/index.js","components/SearchInput/index.js","components/TodoList/index.js","App.js","index.js"],"names":["ListContext","createContext","ListProvider","children","useState","JSON","parse","localStorage","getItem","lists","setLists","useEffect","sort","a","b","Date","date","setItem","stringify","Provider","value","FormikFormUpdate","withFormik","mapPropsToValues","title","desc","pio","validationSchema","Yup","shape","required","min","now","props","setFieldValue","setIsShowDetails","_id","useContext","Form","onSubmit","e","preventDefault","listsAfterUpdate","map","el","values","className","errors","type","name","onChange","handleChange","htmlFor","rows","onBlur","handleBlur","styled","form","TodoItem","_checked","isShowDetails","Item","id","checked","listsAfterChecked","Button","onClick","listsAfterRemove","filter","pre","div","BulkAction","Bottom","push","FormikFormAddTask","newTask","Math","floor","random","getTime","previousLists","style","borderTop","disabled","SearchInput","setListsAfterSearch","Input","placeholder","searchUsers","toLowerCase","includes","target","input","TodoList","listsAfterSearch","marginBottom","length","list","index","App","isShowBulkAction","useMemo","boolean","Container","LeftSide","H2","RightSide","h2","ReactDOM","render","document","getElementById"],"mappings":"6MAEMA,EAAcC,0BAEPC,EAAe,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC7B,EAA0BC,mBACxBC,KAAKC,MAAMC,aAAaC,QAAQ,WAAa,IAD/C,mBAAOC,EAAP,KAAcC,EAAd,KASA,OALAC,qBAAU,WACRF,EAAMG,MAAK,SAACC,EAAGC,GAAJ,OAAU,IAAIC,KAAKF,EAAEG,MAAQ,IAAID,KAAKD,EAAEE,SACnDT,aAAaU,QAAQ,QAASZ,KAAKa,UAAUT,MAC5C,CAACA,IAGF,cAACT,EAAYmB,SAAb,CAAsBC,MAAO,CAAEX,QAAOC,YAAtC,SACGP,KAKQH,I,uBC8Df,I,IAAMqB,EAAmBC,YAAW,CAClCC,iBADkC,WAGhC,MAAO,CACLC,MAAO,IACPC,KAAM,GACNT,KAAM,GACNU,IAAK,KAGTC,iBAAkBC,MAAaC,MAAM,CAEnCL,MAAOI,MAAaE,SAAS,qBAC7Bd,KAAMY,MAAWG,IACf,IAAIhB,KAAKA,KAAKiB,MAAQ,OACtB,iCAfmBV,EA7EzB,SAAoBW,GAClB,IAAQT,EACNS,EADMT,MAAOC,EACbQ,EADaR,KAAMT,EACnBiB,EADmBjB,KAAMU,EACzBO,EADyBP,IAAKQ,EAC9BD,EAD8BC,cAAeC,EAC7CF,EAD6CE,iBAAkBC,EAC/DH,EAD+DG,IAEjE,EAA4BC,qBAAWrC,GAA/BS,EAAR,EAAQA,MAAOC,EAAf,EAAeA,SAiBf,OAPAC,qBAAU,WACRuB,EAAc,QAASV,GACvBU,EAAc,OAAQT,GACtBS,EAAc,OAAQlB,GACtBkB,EAAc,MAAOR,KACpB,CAACF,EAAOC,EAAMT,EAAMU,EAAKQ,IAG1B,eAACI,EAAD,CAAMC,SAjBa,SAACC,GACpBA,EAAEC,iBACF,IAAIC,EAAmB,YAAIjC,GAAOkC,KAAI,SAACC,GAAD,OACpCA,EAAGR,MAAQA,EAAX,2BAAsBQ,GAAOX,EAAMY,QAAWD,KAEhDlC,EAASgC,GACTP,GAAiB,IAWjB,UACE,mBAAGW,UAAU,SAAb,SAAuBb,EAAMc,OAAOvB,QACpC,uBACEwB,KAAK,OACLC,KAAK,QACL7B,MAAOa,EAAMY,OAAOrB,MACpB0B,SAAUjB,EAAMkB,eAElB,uBAEA,uBAAOC,QAAQ,GAAf,yBACA,uBACA,0BACEC,KAAK,KACLJ,KAAK,OACL7B,MAAOa,EAAMY,OAAOpB,KACpByB,SAAUjB,EAAMkB,eAElB,uBAEA,sBAAKL,UAAU,MAAf,UACE,sBAAKA,UAAU,MAAf,UACE,mBAAGA,UAAU,SAAb,SAAuBb,EAAMc,OAAO/B,OACpC,uBAAOoC,QAAQ,GAAf,kBACA,uBACA,uBACEJ,KAAK,OACLC,KAAK,OACL7B,MAAOa,EAAMY,OAAO7B,KACpBkC,SAAUjB,EAAMkB,eAElB,0BAEF,sBAAKL,UAAU,MAAf,UACE,sBACA,uBAAOM,QAAQ,GAAf,qBACA,uBACA,yBACEH,KAAK,MACL7B,MAAOa,EAAMY,OAAOnB,IACpBwB,SAAUjB,EAAMkB,aAChBG,OAAQrB,EAAMsB,WAJhB,UAME,wBAAQnC,MAAM,MAAd,iBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,OAAd,qBAEF,6BAIJ,wBAAQ4B,KAAK,SAAb,0BAyBOV,EAAOkB,IAAOC,KAAV,+9BAkEFpC,ICpKA,SAASqC,EAASzB,GAC/B,IAAQT,EAAyBS,EAAzBT,MAAOY,EAAkBH,EAAlBG,IAAKuB,EAAa1B,EAAb0B,SACpB,EAA0CvD,oBAAS,GAAnD,mBAAOwD,EAAP,KAAsBzB,EAAtB,KACA,EAA4BE,qBAAWrC,GAA/BS,EAAR,EAAQA,MAAOC,EAAf,EAAeA,SAkBf,OACE,gCACE,eAACmD,EAAD,WACE,uBACEb,KAAK,WACLC,KAAK,GACLa,GAAG,GACHC,QAASJ,EACTT,SApBc,WACpB,IAAIc,EAAoB,YAAIvD,GAAOkC,KAAI,SAACC,GAAD,OACrCA,EAAGR,MAAQA,EAAX,2BAAsBQ,GAAtB,IAA0Be,UAAWA,IAAaf,KAEpDlC,EAASsD,MAkBL,+BAAOxC,IACP,cAACyC,EAAD,CAAQnB,UAAU,SAASoB,QAhBZ,WACnB,IAAIC,EAAmB,YAAI1D,GAAO2D,QAAO,SAACxB,GAAD,OAAQA,EAAGR,MAAQA,KAC5D1B,EAASyD,IAcL,oBAGA,cAACF,EAAD,CAAQnB,UAAU,UAAUoB,QA9BZ,WACpB/B,GAAiB,SAACkC,GAAD,OAAUA,MA6BvB,wBAIDT,GACC,cAAC,EAAD,2BAAgB3B,GAAhB,IAAuBE,iBAAkBA,QAMjD,I,EAAM0B,EAAOL,IAAOc,IAAV,kRAmBGL,EAAST,IAAOc,IAAV,gQCjEJ,SAASC,IACtB,MAA4BlC,qBAAWrC,GAA/BS,EAAR,EAAQA,MAAOC,EAAf,EAAeA,SAUf,OACE,eAAC8D,EAAD,WACE,gDACA,cAACP,EAAD,CAAQnB,UAAU,SAASoB,QAXV,WACnB,IAAMC,EAAmB,GACzB,YAAI1D,GAAOkC,KAAI,SAACC,GACTA,EAAGe,UAAUQ,EAAiBM,KAAK7B,MAE1ClC,EAASyD,IAMP,oBAGA,cAACF,EAAD,CAAQnB,UAAU,OAAlB,qBAKN,IAAM0B,EAAShB,IAAOc,IAAV,ySCuDZ,I,EAoBeI,EApBWpD,YAAW,CACnCC,iBADmC,WAGjC,MAAO,CACLC,MAAO,GACPC,KAAM,GACNT,KAAM,GACNU,IAAK,WAGTC,iBAAkBC,MAAaC,MAAM,CAEnCL,MAAOI,MAAaE,SAAS,qBAC7Bd,KAAMY,MAAWG,IACf,IAAIhB,KAAKA,KAAKiB,MAAQ,OACtB,iCAfoBV,EA5E1B,SAAqBW,GACnB,IAAQvB,EAAa2B,qBAAWrC,GAAxBU,SACAwB,EAAkBD,EAAlBC,cAiBR,OACE,eAACI,EAAD,CAAMC,SAhBa,SAACC,GACpBA,EAAEC,iBACF,IAAMkC,EAAO,2BACR1C,EAAMY,QADE,IAEXT,IAAKwC,KAAKC,MAAsB,GAAhBD,KAAKE,WAAiB,IAAI/D,MAAOgE,UACjDpB,UAAU,IAEZjD,GAAS,SAACsE,GAAD,4BAAuBA,GAAvB,CAAsCL,OAE/CzC,EAAc,QAAS,IACvBA,EAAc,OAAQ,IACtBA,EAAc,OAAQ,IACtBA,EAAc,MAAO,WAIS+C,MAAO,CAAEC,UAAW,mBAAlD,UACE,mBAAGpC,UAAU,SAAb,SAAuBb,EAAMc,OAAOvB,QACpC,uBACEwB,KAAK,OACLC,KAAK,QACL7B,MAAOa,EAAMY,OAAOrB,MACpB0B,SAAUjB,EAAMkB,eAElB,uBAEA,uBAAOC,QAAQ,GAAf,yBACA,uBACA,0BACEC,KAAK,KACLJ,KAAK,OACL7B,MAAOa,EAAMY,OAAOpB,KACpByB,SAAUjB,EAAMkB,eAElB,uBAEA,sBAAKL,UAAU,MAAf,UACE,sBAAKA,UAAU,MAAf,UACE,uBAAOM,QAAQ,GAAf,kBACA,uBACEJ,KAAK,OACLC,KAAK,OACL7B,MAAOa,EAAMY,OAAO7B,KACpBkC,SAAUjB,EAAMkB,eAElB,mBAAGL,UAAU,SAAb,SAAuBb,EAAMc,OAAO/B,UAEtC,sBAAK8B,UAAU,MAAf,UACE,uBAAOM,QAAQ,GAAf,qBACA,yBACEH,KAAK,MACL7B,MAAOa,EAAMY,OAAOnB,IACpBwB,SAAUjB,EAAMkB,aAChBG,OAAQrB,EAAMsB,WAJhB,UAME,wBAAQnC,MAAM,MAAd,iBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,OAAd,2BAKN,wBACE4B,KAAK,SACLmC,UAAWlD,EAAMY,OAAO7B,OAASiB,EAAMY,OAAOrB,MAFhD,uBCpES,SAAS4D,EAAT,GAA+C,IAAxBC,EAAuB,EAAvBA,oBAC5B5E,EAAU4B,qBAAWrC,GAArBS,MASR,OAAO,cAAC6E,EAAD,CAAOC,YAAY,YAAYrC,SAPjB,SAACV,GACpB,IAAMgD,EAAc/E,EAAM2D,QAAO,SAACxB,GAAD,OAC/BA,EAAGpB,MAAMiE,cAAcC,SAASlD,EAAEmD,OAAOvE,MAAMqE,kBAEjDJ,EAAoBG,MAMxB,I,QAAMF,EAAQ9B,IAAOoC,MAAV,4MCdI,SAASC,EAAT,GAAyC,IAArBC,EAAoB,EAApBA,iBACjC,OACE,qBAAKb,MAAO,CAAEc,aAAc,SAA5B,SACGD,EAAiBE,OAAS,EACzBF,EAAiBnD,KAAI,SAACsD,EAAMC,GAAP,OACnB,cAACxC,EAAD,eAA0BuC,GAAXC,MAGjB,8DC+BOC,MAjCf,WACE,IAAQ1F,EAAU4B,qBAAWrC,GAArBS,MAEF2F,EAAmBC,mBAAQ,WAC/B,IADqC,EACjCC,GAAU,EADuB,cAEtB7F,GAFsB,IAErC,2BAAsB,SACbkD,WAAU2C,GAAU,IAHQ,8BAKrC,OAAOA,IACN,CAAC7F,IAEJ,EAAgDL,mBAASK,GAAzD,mBAAOqF,EAAP,KAAyBT,EAAzB,KAMA,OAJA1E,qBAAU,WACR0E,EAAoB5E,KACnB,CAACA,IAGF,eAAC8F,EAAD,WACE,eAACC,EAAD,WACE,cAACC,EAAD,uBACA,cAAC,EAAD,OAEF,eAACC,EAAD,WACE,cAACD,EAAD,yBACA,cAACrB,EAAD,CAAaC,oBAAqBA,IAClC,cAACQ,EAAD,CAAUC,iBAAkBA,IAC3BM,GAAoB,cAAC7B,EAAD,WAQvBgC,EAAY/C,IAAOc,IAAV,sYAoBTmC,EAAKjD,IAAOmD,GAAV,mDAIFH,EAAWhD,IAAOc,IAAV,wPAaRoC,EAAYlD,IAAOc,IAAV,oNC3EfsC,IAASC,OACP,cAAC,EAAD,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.7b9f3f04.chunk.js","sourcesContent":["import React, { createContext, useEffect, useState } from \"react\";\n\nconst ListContext = createContext();\n\nexport const ListProvider = ({ children }) => {\n  const [lists, setLists] = useState(\n    JSON.parse(localStorage.getItem(\"lists\")) || []\n  );\n\n  useEffect(() => {\n    lists.sort((a, b) => new Date(a.date) - new Date(b.date));\n    localStorage.setItem(\"lists\", JSON.stringify(lists));\n  }, [lists]);\n\n  return (\n    <ListContext.Provider value={{ lists, setLists }}>\n      {children}\n    </ListContext.Provider>\n  );\n};\n\nexport default ListContext;\n","import { withFormik } from \"formik\";\nimport React, { useContext, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport * as Yup from \"yup\";\nimport ListContext from \"../../../../Context/ListContext\";\n\nfunction FormUpdate(props) {\n  const { title, desc, date, pio, setFieldValue, setIsShowDetails, _id } =\n    props;\n  const { lists, setLists } = useContext(ListContext);\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    let listsAfterUpdate = [...lists].map((el) =>\n      el._id === _id ? { ...el, ...props.values } : el\n    );\n    setLists(listsAfterUpdate);\n    setIsShowDetails(false);\n  };\n\n  useEffect(() => {\n    setFieldValue(\"title\", title);\n    setFieldValue(\"desc\", desc);\n    setFieldValue(\"date\", date);\n    setFieldValue(\"pio\", pio);\n  }, [title, desc, date, pio, setFieldValue]);\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <p className=\"errors\">{props.errors.title}</p>\n      <input\n        type=\"text\"\n        name=\"title\"\n        value={props.values.title}\n        onChange={props.handleChange}\n      />\n      <br />\n\n      <label htmlFor=\"\">Description</label>\n      <br />\n      <textarea\n        rows=\"10\"\n        name=\"desc\"\n        value={props.values.desc}\n        onChange={props.handleChange}\n      ></textarea>\n      <br />\n\n      <div className=\"row\">\n        <div className=\"col\">\n          <p className=\"errors\">{props.errors.date}</p>\n          <label htmlFor=\"\">Date</label>\n          <br />\n          <input\n            type=\"date\"\n            name=\"date\"\n            value={props.values.date}\n            onChange={props.handleChange}\n          />\n          <br />\n        </div>\n        <div className=\"col\">\n          <p></p>\n          <label htmlFor=\"\">Piority</label>\n          <br />\n          <select\n            name=\"pio\"\n            value={props.values.pio}\n            onChange={props.handleChange}\n            onBlur={props.handleBlur}\n          >\n            <option value=\"low\">Low</option>\n            <option value=\"normal\">Normal</option>\n            <option value=\"high\">High</option>\n          </select>\n          <br />\n        </div>\n      </div>\n\n      <button type=\"submit\">Update</button>\n    </Form>\n  );\n}\n\nconst FormikFormUpdate = withFormik({\n  mapPropsToValues() {\n    // Init form field\n    return {\n      title: \" \",\n      desc: \"\",\n      date: \"\",\n      pio: \"\",\n    };\n  },\n  validationSchema: Yup.object().shape({\n    // Validate form field\n    title: Yup.string().required(\"Title is required\"),\n    date: Yup.date().min(\n      new Date(Date.now() - 86400000),\n      \"Date cannot be in the past\"\n    ),\n  }),\n})(FormUpdate);\n\nexport const Form = styled.form`\n  padding: 15px;\n  margin: 0px 0px 15px 0px;\n  border: 1px solid black;\n  border-top: none;\n\n  input {\n    padding: 10px 10px 10px 5px;\n    display: block;\n    width: 100%;\n\n    &:focus {\n      border-bottom: 1px solid #757575;\n      outline: none;\n    }\n  }\n\n  label {\n    font-weight: bold;\n  }\n\n  textarea {\n    width: 100%;\n  }\n\n  button {\n    width: 100%;\n    background-color: #4caf50;\n    color: #fff;\n    padding: 10px;\n    border-radius: 8px;\n    font-size: 1.1em;\n    border: 0;\n    cursor: pointer;\n  }\n\n  button:disabled,\n  button[disabled] {\n    border: 1px solid #999999;\n    background-color: #cccccc;\n    color: #666666;\n  }\n\n  select {\n    font-size: 18px;\n    padding: 10px 10px 10px 5px;\n    display: block;\n    width: 90%;\n  }\n\n  .row {\n    margin-top: 20px;\n    display: flex;\n  }\n  .col {\n    width: 50%;\n    input {\n      width: 90%;\n    }\n  }\n\n  .errors {\n    color: red;\n  }\n`;\n\nexport default FormikFormUpdate;\n","import React, { useContext, useState } from \"react\";\nimport styled from \"styled-components\";\nimport ListContext from \"../../../../Context/ListContext\";\nimport FormUpdate from \"../FormUpdate\";\n\nexport default function TodoItem(props) {\n  const { title, _id, _checked } = props;\n  const [isShowDetails, setIsShowDetails] = useState(false);\n  const { lists, setLists } = useContext(ListContext);\n\n  const handleDetails = () => {\n    setIsShowDetails((pre) => !pre);\n  };\n\n  const handleChecked = () => {\n    let listsAfterChecked = [...lists].map((el) =>\n      el._id === _id ? { ...el, _checked: !_checked } : el\n    );\n    setLists(listsAfterChecked);\n  };\n\n  const handleRemove = () => {\n    let listsAfterRemove = [...lists].filter((el) => el._id !== _id);\n    setLists(listsAfterRemove);\n  };\n\n  return (\n    <div>\n      <Item>\n        <input\n          type=\"checkbox\"\n          name=\"\"\n          id=\"\"\n          checked={_checked}\n          onChange={handleChecked}\n        />\n        <span>{title}</span>\n        <Button className=\"remove\" onClick={handleRemove}>\n          Remove\n        </Button>\n        <Button className=\"details\" onClick={handleDetails}>\n          Details\n        </Button>\n      </Item>\n      {isShowDetails && (\n        <FormUpdate {...props} setIsShowDetails={setIsShowDetails} />\n      )}\n    </div>\n  );\n}\n\nconst Item = styled.div`\n  margin: 15px 0px 0px 0px;\n  padding: 15px;\n  border: 1px solid black;\n\n  span {\n    margin-left: 10px;\n  }\n\n  .details {\n    margin-right: 15px;\n    background-color: #00bcd4;\n  }\n\n  .remove {\n    background-color: #d9534f;\n  }\n`;\n\nexport const Button = styled.div`\n  float: right;\n  border-radius: 8px;\n  color: #fff;\n  border: 0;\n  cursor: pointer;\n  text-align: center;\n  width: 60px;\n  font-size: 0.9em;\n  @media (min-width: 992px) {\n    width: 120px;\n    font-size: 1.1em;\n  }\n`;\n","import React, { useContext } from \"react\";\nimport styled from \"styled-components\";\nimport ListContext from \"../../Context/ListContext\";\nimport { Button } from \"../TodoList/components/TodoItem\";\n\nexport default function BulkAction() {\n  const { lists, setLists } = useContext(ListContext);\n\n  const handleRemove = () => {\n    const listsAfterRemove = [];\n    [...lists].map((el) => {\n      if (!el._checked) listsAfterRemove.push(el);\n    });\n    setLists(listsAfterRemove);\n  };\n\n  return (\n    <Bottom>\n      <span>Bulk action:</span>\n      <Button className=\"remove\" onClick={handleRemove}>\n        Remove\n      </Button>\n      <Button className=\"done\">Done</Button>\n    </Bottom>\n  );\n}\n\nconst Bottom = styled.div`\n  position: absolute;\n  background-color: #e0e0e0;\n  bottom: 0;\n  padding: 15px 0;\n  width: calc(100% - 30px);\n  .remove {\n    background-color: #d9534f;\n    margin: 0 15px;\n  }\n  .done {\n    background-color: #2196f3;\n  }\n  span {\n    margin: 15px;\n  }\n`;\n","import { withFormik } from \"formik\";\nimport React, { useContext } from \"react\";\nimport { Form } from \"../TodoList/components/FormUpdate\";\nimport * as Yup from \"yup\";\nimport ListContext from \"../../Context/ListContext\";\n\nfunction FormAddTask(props) {\n  const { setLists } = useContext(ListContext);\n  const { setFieldValue } = props;\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const newTask = {\n      ...props.values,\n      _id: Math.floor(Math.random() * 10) + new Date().getTime(),\n      _checked: false,\n    };\n    setLists((previousLists) => [...previousLists, newTask]);\n\n    setFieldValue(\"title\", \"\");\n    setFieldValue(\"desc\", \"\");\n    setFieldValue(\"date\", \"\");\n    setFieldValue(\"pio\", \"normal\");\n  };\n\n  return (\n    <Form onSubmit={handleSubmit} style={{ borderTop: \"1px solid black\" }}>\n      <p className=\"errors\">{props.errors.title}</p>\n      <input\n        type=\"text\"\n        name=\"title\"\n        value={props.values.title}\n        onChange={props.handleChange}\n      />\n      <br />\n\n      <label htmlFor=\"\">Description</label>\n      <br />\n      <textarea\n        rows=\"10\"\n        name=\"desc\"\n        value={props.values.desc}\n        onChange={props.handleChange}\n      ></textarea>\n      <br />\n\n      <div className=\"row\">\n        <div className=\"col\">\n          <label htmlFor=\"\">Date</label>\n          <input\n            type=\"date\"\n            name=\"date\"\n            value={props.values.date}\n            onChange={props.handleChange}\n          />\n          <p className=\"errors\">{props.errors.date}</p>\n        </div>\n        <div className=\"col\">\n          <label htmlFor=\"\">Piority</label>\n          <select\n            name=\"pio\"\n            value={props.values.pio}\n            onChange={props.handleChange}\n            onBlur={props.handleBlur}\n          >\n            <option value=\"low\">Low</option>\n            <option value=\"normal\">Normal</option>\n            <option value=\"high\">High</option>\n          </select>\n        </div>\n      </div>\n\n      <button\n        type=\"submit\"\n        disabled={!props.values.date || !props.values.title}\n      >\n        Add\n      </button>\n    </Form>\n  );\n}\n\nconst FormikFormAddTask = withFormik({\n  mapPropsToValues() {\n    // Init form field\n    return {\n      title: \"\",\n      desc: \"\",\n      date: \"\",\n      pio: \"normal\",\n    };\n  },\n  validationSchema: Yup.object().shape({\n    // Validate form field\n    title: Yup.string().required(\"Title is required\"),\n    date: Yup.date().min(\n      new Date(Date.now() - 86400000),\n      \"Date cannot be in the past\"\n    ),\n  }),\n})(FormAddTask);\n\nexport default FormikFormAddTask;\n","import React, { useContext } from \"react\";\nimport styled from \"styled-components\";\nimport ListContext from \"../../Context/ListContext\";\n\nexport default function SearchInput({ setListsAfterSearch }) {\n  const { lists } = useContext(ListContext);\n\n  const handleSearch = (e) => {\n    const searchUsers = lists.filter((el) =>\n      el.title.toLowerCase().includes(e.target.value.toLowerCase())\n    );\n    setListsAfterSearch(searchUsers);\n  };\n\n  return <Input placeholder=\"Search...\" onChange={handleSearch} />;\n}\n\nconst Input = styled.input`\n  font-size: 18px;\n  padding: 10px 10px 10px 5px;\n  display: block;\n  width: 100%;\n\n  &:focus {\n    border-bottom: 1px solid #757575;\n    border: 1px solid black;\n  }\n`;\n","import React from \"react\";\nimport TodoItem from \"./components/TodoItem\";\n\nexport default function TodoList({ listsAfterSearch }) {\n  return (\n    <div style={{ marginBottom: \"100px\" }}>\n      {listsAfterSearch.length > 0 ? (\n        listsAfterSearch.map((list, index) => (\n          <TodoItem key={index} {...list} />\n        ))\n      ) : (\n        <p>No result for searching ...</p>\n      )}\n    </div>\n  );\n}\n","import { useContext, useEffect, useMemo, useState } from \"react\";\nimport styled from \"styled-components\";\nimport \"./App.css\";\nimport BulkAction from \"./components/BulkAction\";\nimport FormAddTask from \"./components/FormAddTask\";\nimport SearchInput from \"./components/SearchInput\";\nimport TodoList from \"./components/TodoList\";\nimport ListContext from \"./Context/ListContext\";\n\nfunction App() {\n  const { lists } = useContext(ListContext);\n\n  const isShowBulkAction = useMemo(() => {\n    let boolean = false;\n    for (let el of lists) {\n      if (el._checked) boolean = true;\n    }\n    return boolean;\n  }, [lists]);\n\n  const [listsAfterSearch, setListsAfterSearch] = useState(lists);\n\n  useEffect(() => {\n    setListsAfterSearch(lists);\n  }, [lists]);\n\n  return (\n    <Container>\n      <LeftSide>\n        <H2>New task</H2>\n        <FormAddTask />\n      </LeftSide>\n      <RightSide>\n        <H2>To Do List</H2>\n        <SearchInput setListsAfterSearch={setListsAfterSearch} />\n        <TodoList listsAfterSearch={listsAfterSearch} />\n        {isShowBulkAction && <BulkAction />}\n      </RightSide>\n    </Container>\n  );\n}\n\nexport default App;\n\nconst Container = styled.div`\n  padding-right: 15px;\n  padding-left: 15px;\n  margin: 30px auto;\n  display: flex;\n  flex-direction: column;\n  min-height: calc(90vh);\n  border: 1px solid black;\n  @media (min-width: 768px) {\n    width: 750px;\n  }\n  @media (min-width: 992px) {\n    width: 970px;\n    flex-direction: row;\n  }\n  @media (min-width: 1200px) {\n    width: 1170px;\n  }\n`;\n\nconst H2 = styled.h2`\n  text-align: center;\n`;\n\nconst LeftSide = styled.div`\n  width: 100%;\n  padding-right: 15px;\n  padding-left: 15px;\n  margin-right: auto;\n  margin-left: auto;\n  border-right: none;\n  @media (min-width: 992px) {\n    width: 40%;\n    border-right: 1px solid black;\n  }\n`;\n\nconst RightSide = styled.div`\n  position: relative;\n  padding-right: 15px;\n  padding-left: 15px;\n  margin-right: auto;\n  margin-left: auto;\n  width: 100%;\n  @media (min-width: 992px) {\n    width: 60%;\n  }\n`;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { ListProvider } from \"./Context/ListContext\";\n\nReactDOM.render(\n  <ListProvider>\n    <App />\n  </ListProvider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}